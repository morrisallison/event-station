{
  "version": 3,
  "sources": ["dist/event-station.js"],
  "sourcesContent": [
    "/*\n * event-station v2.0.0-beta.1\n * Copyright (c) 2016-2025 Morris Allison III <author@morris.xyz> (http://morris.xyz). All rights reserved.\n * Released under the MIT license\n * @preserve\n */\n// lib/actions/addListener.js\nfunction addListener(stationMeta, listener) {\n  const eventName = listener.eventName;\n  const listenersMap = stationMeta.listenersMap;\n  if (!listenersMap[eventName]) {\n    listenersMap[eventName] = [];\n  }\n  const stationMetas = listener.stationMetas;\n  if (!stationMetas) {\n    listener.stationMetas = [stationMeta];\n  } else {\n    stationMetas.push(stationMeta);\n  }\n  listenersMap[eventName].push(listener);\n  stationMeta.listenerCount++;\n  const hearer = listener.hearer;\n  if (hearer) {\n    hearer.stationMeta.hearingCount++;\n  }\n}\n\n// lib/actions/matchListener.js\nfunction matchListener(matchingListener, attachedListener, exactMatch) {\n  if (exactMatch === true) {\n    return matchingListener === attachedListener;\n  }\n  const matchCallback = matchingListener.matchCallback;\n  if (matchCallback && matchCallback !== attachedListener.matchCallback) {\n    return false;\n  }\n  const matchContext = matchingListener.matchContext;\n  if (matchContext !== undefined && matchContext !== attachedListener.matchContext) {\n    return false;\n  }\n  const hearer = matchingListener.hearer;\n  if (hearer && hearer !== attachedListener.hearer) {\n    return false;\n  }\n  const eventName = matchingListener.eventName;\n  if (eventName !== undefined && eventName !== attachedListener.eventName) {\n    return false;\n  }\n  return true;\n}\n\n// lib/actions/removeListener.js\nfunction removeListener(stationMeta, listener, exactMatch) {\n  if (stationMeta.listenerCount < 1)\n    return;\n  const listenersMap = stationMeta.listenersMap;\n  const eventName = listener.eventName;\n  const attachedListeners = listenersMap[eventName];\n  if (!attachedListeners)\n    return;\n  const attachedListenersCount = attachedListeners.length;\n  if (attachedListenersCount === 1) {\n    if (!matchListener(listener, attachedListeners[0], exactMatch))\n      return;\n    delete listenersMap[eventName];\n    stationMeta.listenerCount--;\n    reduceHearerHearingCount(listener);\n    removeMetaFromStation(stationMeta, listener);\n    return;\n  }\n  for (let i = 0, c = attachedListenersCount;i < c; i++) {\n    const attachedListener = attachedListeners[i];\n    if (!matchListener(listener, attachedListener, exactMatch))\n      continue;\n    attachedListeners.splice(i, 1);\n    stationMeta.listenerCount--;\n    i--;\n    c--;\n    reduceHearerHearingCount(listener);\n    removeMetaFromStation(stationMeta, listener);\n  }\n  if (attachedListeners.length < 1) {\n    delete listenersMap[eventName];\n  }\n}\nfunction removeMetaFromStation(targetMeta, listener) {\n  const stationMetas = listener.stationMetas;\n  if (!stationMetas)\n    return;\n  if (stationMetas.length === 1) {\n    listener.stationMetas = undefined;\n    return;\n  }\n  const newStationMetas = [];\n  for (const stationMeta of stationMetas) {\n    if (stationMeta !== targetMeta) {\n      newStationMetas.push(stationMeta);\n    }\n  }\n  if (newStationMetas.length < 1) {\n    listener.stationMetas = undefined;\n  } else {\n    listener.stationMetas = newStationMetas;\n  }\n}\nfunction reduceHearerHearingCount(listener) {\n  const hearer = listener.hearer;\n  if (hearer) {\n    hearer.stationMeta.hearingCount--;\n  }\n}\n\n// lib/actions/removeListenerFromAll.js\nfunction removeListenerFromAll(listener) {\n  const stationMetas = listener.stationMetas;\n  if (!stationMetas)\n    return;\n  for (const stationMeta of stationMetas) {\n    removeListener(stationMeta, listener, true);\n  }\n}\n\n// lib/actions/applyListeners.js\nfunction applyListeners(_listeners, originStation, enableAsync, args) {\n  const argsLength = args.length;\n  const stationMeta = originStation.stationMeta;\n  stationMeta.isPropagationStopped = false;\n  const results = [];\n  const listeners = _listeners.slice();\n  for (const listener of listeners) {\n    let result;\n    if (stationMeta.isPropagationStopped) {\n      stationMeta.isPropagationStopped = false;\n      return results;\n    }\n    if (listener.isPaused)\n      continue;\n    const callback = listener.callback;\n    const context = listener.context;\n    if (callback) {\n      switch (argsLength) {\n        case 0:\n          result = callback.call(context);\n          break;\n        case 1:\n          result = callback.call(context, args[0]);\n          break;\n        case 2:\n          result = callback.call(context, args[0], args[1]);\n          break;\n        case 3:\n          result = callback.call(context, args[0], args[1], args[2]);\n          break;\n        default:\n          result = callback.apply(context, args);\n          break;\n      }\n      results.push(result);\n    }\n    const resolves = listener.resolves;\n    if (resolves) {\n      for (const resolve of resolves) {\n        resolve(listener);\n      }\n      listener.resolves = undefined;\n    }\n    const { maxOccurrences } = listener;\n    let { occurrences } = listener;\n    if (maxOccurrences !== undefined) {\n      if (occurrences === undefined) {\n        occurrences = 0;\n      }\n      listener.occurrences = ++occurrences;\n      if (occurrences === maxOccurrences) {\n        removeListenerFromAll(listener);\n      }\n    }\n  }\n  return results;\n}\n\n// lib/actions/getAllListeners.js\nfunction getAllListeners(stationMeta) {\n  if (stationMeta.listenerCount < 1)\n    return [];\n  const listenersMap = stationMeta.listenersMap;\n  let listeners = [];\n  for (const eventName in listenersMap) {\n    listeners = listeners.concat(listenersMap[eventName]);\n  }\n  return listeners;\n}\n\n// lib/actions/matchListeners.js\nfunction matchListeners(matchingListener, attachedListeners, exactMatch) {\n  const count = attachedListeners.length;\n  if (count < 1)\n    return false;\n  for (const attachedListener of attachedListeners) {\n    if (matchListener(matchingListener, attachedListener, exactMatch)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// lib/actions/hasListener.js\nfunction hasListener(stationMeta, listener, exactMatch) {\n  const listenersMap = stationMeta.listenersMap;\n  const eventName = listener.eventName;\n  let attachedListeners;\n  if (eventName === undefined) {\n    attachedListeners = getAllListeners(stationMeta);\n  } else {\n    attachedListeners = listenersMap[eventName];\n    if (!attachedListeners) {\n      return false;\n    }\n  }\n  return matchListeners(listener, attachedListeners, exactMatch);\n}\n\n// lib/models/Listeners.js\nclass Listeners {\n  get count() {\n    return this.listeners.length;\n  }\n  originStation;\n  listeners;\n  constructor(originStation, listeners) {\n    this.originStation = originStation;\n    this.listeners = listeners;\n  }\n  occur(maxOccurrences) {\n    if (maxOccurrences < 1) {\n      throw new Error(`The maximum occurrences must be greater than or equal to one.`);\n    }\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      listener.maxOccurrences = maxOccurrences;\n    }\n    return this;\n  }\n  calling(callback) {\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      listener.callback = callback;\n      listener.matchCallback = callback;\n    }\n    return this;\n  }\n  once(callback) {\n    return this.calling(callback).occur(1);\n  }\n  off() {\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      removeListenerFromAll(listener);\n    }\n    return this;\n  }\n  using(context) {\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      listener.context = context;\n      listener.matchContext = context;\n    }\n    return this;\n  }\n  addTo(station) {\n    const listeners = this.listeners;\n    const stationMeta = station.stationMeta;\n    for (const listener of listeners) {\n      const crossOrigin = listener.crossOrigin;\n      if (crossOrigin && crossOrigin !== station) {\n        throw new Error(`Cross-emitter listeners can only be attached to their origin station.`);\n      }\n      addListener(stationMeta, listener);\n    }\n    return this;\n  }\n  removeFrom(station) {\n    const listeners = this.listeners;\n    const stationMeta = station.stationMeta;\n    for (const listener of listeners) {\n      removeListener(stationMeta, listener, true);\n    }\n    return this;\n  }\n  moveTo(station) {\n    this.removeFrom(this.originStation);\n    this.originStation = station;\n    this.addTo(station);\n    return this;\n  }\n  has(matchingListener, exactMatch) {\n    return matchListeners(matchingListener, this.listeners, exactMatch);\n  }\n  attach() {\n    return this.addTo(this.originStation);\n  }\n  detach() {\n    return this.removeFrom(this.originStation);\n  }\n  isAttachedTo(station) {\n    if (!station) {\n      return isListenersAttached(this.listeners);\n    }\n    return hasListeners(station.stationMeta, this.listeners, true);\n  }\n  isAttached() {\n    return this.isAttachedTo(this.originStation);\n  }\n  pause() {\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      listener.isPaused = true;\n    }\n    return this;\n  }\n  resume() {\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      listener.isPaused = false;\n    }\n    return this;\n  }\n  isPaused() {\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      if (listener.isPaused)\n        return true;\n    }\n    return false;\n  }\n  toPromises() {\n    const promises = [];\n    const listeners = this.listeners;\n    const count = listeners.length;\n    for (let i = 0;i < count; i++) {\n      const listener = listeners[i];\n      promises[i] = makePromise(listener);\n    }\n    return promises;\n  }\n  all() {\n    return Promise.all(this.toPromises());\n  }\n  race() {\n    return Promise.race(this.toPromises());\n  }\n  reset() {\n    const listeners = this.listeners;\n    for (const listener of listeners) {\n      listener.occurrences = undefined;\n      listener.isPaused = undefined;\n    }\n    return this;\n  }\n  forEach(func) {\n    const listeners = this.listeners;\n    const count = listeners.length;\n    for (let i = 0;i < count; i++) {\n      const listener = listeners[i];\n      func(listener, i, listeners);\n    }\n    return this;\n  }\n  get(index) {\n    return this.listeners[index];\n  }\n  index(listener) {\n    const listeners = this.listeners;\n    const count = listeners.length;\n    for (let i = 0;i < count; i++) {\n      if (listener === listeners[i])\n        return i;\n    }\n    return;\n  }\n  clone() {\n    const clonedListeners = this.listeners.map(cloneListener);\n    return new Listeners(this.originStation, clonedListeners);\n  }\n}\nfunction makePromise(listener) {\n  return new Promise((resolve) => {\n    if (!listener.resolves) {\n      listener.resolves = [resolve];\n    } else {\n      listener.resolves.push(resolve);\n    }\n  });\n}\nfunction cloneListener(listener) {\n  if (listener.hearer) {\n    throw new Error(`Cross-emitter listeners can't be cloned.`);\n  }\n  return {\n    eventName: listener.eventName,\n    callback: listener.callback,\n    context: listener.context,\n    matchCallback: listener.matchCallback,\n    matchContext: listener.matchContext,\n    isPaused: listener.isPaused,\n    occurrences: listener.occurrences,\n    maxOccurrences: listener.maxOccurrences\n  };\n}\nfunction isListenersAttached(listeners) {\n  for (const listener of listeners) {\n    if (isListenerAttached(listener)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isListenerAttached(listener) {\n  return listener.stationMetas !== undefined;\n}\nfunction hasListeners(stationMeta, listeners, exactMatch) {\n  for (const listener of listeners) {\n    if (hasListener(stationMeta, listener, exactMatch)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// lib/actions/makeStationId.js\nvar stationIdIterator = 0;\nfunction makeStationId() {\n  return String(++stationIdIterator);\n}\n\n// lib/config.js\nvar ALL_EVENT_NAME = \"all\";\nvar defaultOptions = {\n  delimiter: \" \",\n  emitAllEvent: true,\n  enableDelimiter: true,\n  enableRegExp: false,\n  regExpMarker: \"%\"\n};\nvar globalOptions = mergeOptions({}, defaultOptions);\nfunction reset() {\n  mergeOptions(globalOptions, defaultOptions);\n}\nfunction config(opts) {\n  const testOptions = mergeOptions({}, globalOptions, opts);\n  assertOptions(testOptions);\n  mergeOptions(globalOptions, opts);\n}\nfunction assertOptions(opts) {\n  if (opts.delimiter === \"\") {\n    throw new Error(`Invalid option: Delimiters can't be empty strings.`);\n  }\n  if (opts.regExpMarker === \"\") {\n    throw new Error(`Invalid option: RegExp markers can't be empty strings.`);\n  }\n  if (opts.regExpMarker && opts.delimiter && opts.regExpMarker.indexOf(opts.delimiter) >= 0) {\n    throw new Error(`Invalid option: RegExp markers can't contain the delimiter string.`);\n  }\n}\nfunction mergeOptions(target) {\n  for (let i = 1;i < arguments.length; i++) {\n    const source = arguments[i];\n    for (const option in source) {\n      const isValidOption = defaultOptions.hasOwnProperty(option);\n      const value = source[option];\n      if (isValidOption && value != null) {\n        target[option] = value;\n      }\n    }\n  }\n  return target;\n}\n\n// lib/models/EventStation.js\nclass EventStation {\n  stationMeta;\n  constructor(options) {\n    EventStation.init(this, options);\n  }\n  get stationId() {\n    return this.stationMeta.stationId;\n  }\n  get listenerCount() {\n    return this.stationMeta.listenerCount;\n  }\n  get hearingCount() {\n    return this.stationMeta.hearingCount;\n  }\n  get listenerEventNames() {\n    return Object.getOwnPropertyNames(this.stationMeta.listenersMap);\n  }\n  on(q, r, s) {\n    const stationMeta = this.stationMeta;\n    const listeners = makeListeners(this, false, q, r, s);\n    for (const listener of listeners) {\n      addListener(stationMeta, listener);\n    }\n    return new Listeners(this, listeners);\n  }\n  once(q, r, s) {\n    return this.on(q, r, s).occur(1);\n  }\n  off(q, r, s) {\n    const stationMeta = this.stationMeta;\n    if (stationMeta.listenerCount < 1)\n      return;\n    if (q === undefined) {\n      removeAllListeners(stationMeta);\n      return;\n    }\n    if (r === undefined && s === undefined && typeof q === \"string\" && (!stationMeta.enableDelimiter || q.indexOf(stationMeta.delimiter) < 0)) {\n      removeListeners(q, stationMeta);\n      return;\n    }\n    const listeners = makeListeners(this, true, q, r, s);\n    for (const listener of listeners) {\n      removeListener(stationMeta, listener);\n    }\n  }\n  hear(station, q, r, s) {\n    const heardStations = this.stationMeta.heardStations;\n    const listeners = makeListeners(this, false, q, r, s);\n    const targetStationMeta = station.stationMeta;\n    for (const listener of listeners) {\n      listener.hearer = this;\n      listener.crossOrigin = station;\n      addListener(targetStationMeta, listener);\n      heardStations[station.stationId] = station;\n    }\n    return new Listeners(station, listeners);\n  }\n  hearOnce(station, q, r, s) {\n    return this.hear(station, q, r, s).occur(1);\n  }\n  disregard(target, q, r, s) {\n    const stationMeta = this.stationMeta;\n    if (stationMeta.hearingCount < 1)\n      return;\n    let isRemovingAll = false;\n    let listeners = [];\n    if (q === undefined) {\n      isRemovingAll = true;\n    } else {\n      listeners = makeListeners(this, true, q, r, s);\n    }\n    const stations = getTargetedStations(stationMeta, target);\n    const count = stations.length;\n    for (let x = 0;x < count; x++) {\n      const station = stations[x];\n      const targetStationMeta = station.stationMeta;\n      if (isRemovingAll) {\n        q = station.listenerEventNames;\n        listeners = makeListeners(this, true, q, r, s);\n      }\n      for (const listener of listeners) {\n        listener.hearer = this;\n        removeListener(targetStationMeta, listener);\n      }\n    }\n    if (isRemovingAll) {\n      stationMeta.heardStations = Object.create(null);\n    } else {\n      cleanHeardStations(this);\n    }\n  }\n  isHeard(q, r, s) {\n    const stationMeta = this.stationMeta;\n    const listenerCount = stationMeta.listenerCount;\n    if (listenerCount < 1)\n      return false;\n    if (arguments.length < 1) {\n      return listenerCount > 0;\n    }\n    const listeners = makeListeners(this, true, q, r, s);\n    for (const listener of listeners) {\n      if (hasListener(stationMeta, listener))\n        return true;\n    }\n    return false;\n  }\n  isHearing(target, q, r, s) {\n    const stationMeta = this.stationMeta;\n    if (stationMeta.hearingCount < 1)\n      return false;\n    const stations = getTargetedStations(stationMeta, target);\n    let matchAllListeners = false;\n    let listeners = [];\n    if (q) {\n      listeners = makeListeners(this, true, q, r, s);\n    } else {\n      matchAllListeners = true;\n    }\n    const count = stations.length;\n    for (let x = 0;x < count; x++) {\n      const station = stations[x];\n      const targetStationMeta = station.stationMeta;\n      if (matchAllListeners) {\n        q = station.listenerEventNames;\n        listeners = makeListeners(this, true, q, r, s);\n      }\n      for (const listener of listeners) {\n        listener.hearer = this;\n        if (hasListener(targetStationMeta, listener))\n          return true;\n      }\n    }\n    return false;\n  }\n  emit(input, ...args) {\n    const stationMeta = this.stationMeta;\n    if (stationMeta.listenerCount < 1) {\n      return [];\n    }\n    const eventNames = parseEventNames(input, stationMeta);\n    let results = [];\n    for (const eventName of eventNames) {\n      results = results.concat(emitEvent(eventName, this, false, args));\n    }\n    return results;\n  }\n  async emitAsync(input, ...args) {\n    const results = this.emit(input, ...args);\n    if (results.length === 0) {\n      return [];\n    }\n    return Promise.all(results);\n  }\n  makeListeners(q, r, s) {\n    const listeners = makeListeners(this, false, q, r, s);\n    return new Listeners(this, listeners);\n  }\n  getListeners(q, r, s) {\n    const attachedListeners = getAllListeners(this.stationMeta);\n    if (attachedListeners.length < 1) {\n      return;\n    }\n    if (arguments.length < 1) {\n      return new Listeners(this, attachedListeners);\n    }\n    const matchingListeners = makeListeners(this, true, q, r, s);\n    const listeners = [];\n    for (const attachedListener of attachedListeners) {\n      for (const matchingListener of matchingListeners) {\n        if (matchListener(matchingListener, attachedListener)) {\n          listeners.push(attachedListener);\n          break;\n        }\n      }\n    }\n    if (listeners.length < 1)\n      return;\n    return new Listeners(this, listeners);\n  }\n  stopPropagation() {\n    this.stationMeta.isPropagationStopped = true;\n  }\n  addListener(listener) {\n    addListener(this.stationMeta, listener);\n  }\n  removeListener(listener, exactMatch) {\n    removeListener(this.stationMeta, listener, exactMatch);\n  }\n  hasListener(listener, exactMatch) {\n    return hasListener(this.stationMeta, listener, exactMatch);\n  }\n  static init(obj, options) {\n    obj.stationMeta = makeStationMeta(options);\n    return EventStation;\n  }\n  static config(opts) {\n    config(opts);\n    return EventStation;\n  }\n  static reset() {\n    reset();\n    return EventStation;\n  }\n  static create(options) {\n    return new EventStation(options);\n  }\n}\nfunction parseEventNames(input, options) {\n  let names;\n  if (typeof input === \"string\") {\n    const delimiter = options.delimiter;\n    if (options.enableDelimiter && delimiter) {\n      names = input.split(delimiter);\n    } else {\n      names = [input];\n    }\n  } else if (Array.isArray(input)) {\n    names = input;\n  } else {\n    throw new Error(`Invalid first argument`);\n  }\n  return names;\n}\nfunction makeStationMeta(options = {}) {\n  const state = {\n    heardStations: Object.create(null),\n    hearingCount: 0,\n    isPropagationStopped: false,\n    listenerCount: 0,\n    listenersMap: Object.create(null),\n    stationId: makeStationId()\n  };\n  const meta = mergeOptions(state, globalOptions, options);\n  assertOptions(meta);\n  return meta;\n}\nfunction makeListeners(origin, isMatching, q, r, s) {\n  if (typeof q === \"string\") {\n    const stationMeta = origin.stationMeta;\n    const enableDelimiter = stationMeta.enableDelimiter;\n    const delimiter = stationMeta.delimiter;\n    if (enableDelimiter && q.indexOf(delimiter) >= 0) {\n      const _q = q.split(delimiter);\n      return makeListenersFromArray(origin, isMatching, _q, r, s);\n    }\n    return [\n      {\n        eventName: q,\n        callback: r,\n        context: !isMatching && s === undefined ? origin : s,\n        matchCallback: r,\n        matchContext: s\n      }\n    ];\n  }\n  if (Array.isArray(q)) {\n    return makeListenersFromArray(origin, isMatching, q, r, s);\n  }\n  if (typeof q === \"object\") {\n    return makeListenersFromMap(origin, isMatching, q, r);\n  }\n  throw new Error(`Invalid arguments`);\n}\nfunction makeListenersFromMap(originStation, isMatching, listenerMap, context) {\n  const listeners = [];\n  const eventNames = Object.getOwnPropertyNames(listenerMap);\n  for (const eventName of eventNames) {\n    listeners.push({\n      eventName,\n      callback: listenerMap[eventName],\n      context: !isMatching && context === undefined ? originStation : context,\n      matchCallback: listenerMap[eventName],\n      matchContext: context\n    });\n  }\n  return listeners;\n}\nfunction makeListenersFromArray(origin, isMatching, eventNames, callback, context) {\n  const listeners = [];\n  const count = eventNames.length;\n  for (let i = 0;i < count; i++) {\n    listeners.push({\n      eventName: eventNames[i],\n      callback,\n      context: !isMatching && context === undefined ? origin : context,\n      matchContext: context,\n      matchCallback: callback\n    });\n  }\n  return listeners;\n}\nfunction emitEvent(eventName, originStation, enableAsync, args) {\n  const stationMeta = originStation.stationMeta;\n  const listenersMap = stationMeta.listenersMap;\n  let listeners = undefined;\n  if (stationMeta.enableRegExp) {\n    listeners = searchListeners(eventName, listenersMap, stationMeta.regExpMarker);\n  } else {\n    listeners = listenersMap[eventName];\n  }\n  let results = [];\n  if (listeners) {\n    results = [\n      ...results,\n      ...applyListeners(listeners, originStation, enableAsync, args)\n    ];\n  }\n  const listenersMapAll = listenersMap[ALL_EVENT_NAME];\n  if (stationMeta.emitAllEvent && listenersMapAll) {\n    const argsAll = args.slice();\n    argsAll.splice(0, 0, eventName);\n    results = [\n      ...results,\n      ...applyListeners(listenersMapAll, originStation, enableAsync, argsAll)\n    ];\n  }\n  return results;\n}\nfunction searchListeners(eventName, listenersMap, regExpMarker) {\n  let listeners = [];\n  for (const expression in listenersMap) {\n    if (expression.indexOf(regExpMarker) === 0) {\n      if (new RegExp(expression.substr(regExpMarker.length)).test(eventName)) {\n        listeners = listeners.concat(listenersMap[expression]);\n      }\n    } else if (expression === eventName) {\n      listeners = listeners.concat(listenersMap[eventName]);\n    }\n  }\n  return listeners;\n}\nfunction cleanHeardStations(station) {\n  const stationMap = Object.create(null);\n  const heardStations = station.stationMeta.heardStations;\n  for (const stationId in heardStations) {\n    const heardStation = heardStations[stationId];\n    if (hasListener(heardStation.stationMeta, { hearer: station })) {\n      stationMap[stationId] = heardStation;\n    }\n  }\n  station.stationMeta.heardStations = stationMap;\n}\nfunction removeAllListeners(stationMeta) {\n  const listenersMap = stationMeta.listenersMap;\n  for (const eventName in listenersMap) {\n    const listeners = listenersMap[eventName];\n    for (const listener of listeners) {\n      const hearer = listener.hearer;\n      if (hearer) {\n        hearer.stationMeta.hearingCount--;\n      }\n    }\n  }\n  stationMeta.listenerCount = 0;\n  stationMeta.listenersMap = Object.create(null);\n}\nfunction removeListeners(eventName, stationMeta) {\n  const listenersMap = stationMeta.listenersMap;\n  const listeners = listenersMap[eventName];\n  if (listeners === undefined)\n    return;\n  const count = listeners.length;\n  for (let i = 0;i < count; i++) {\n    const listener = listeners[i];\n    const hearer = listener.hearer;\n    if (hearer) {\n      hearer.stationMeta.hearingCount--;\n    }\n  }\n  stationMeta.listenerCount = stationMeta.listenerCount - count;\n  delete listenersMap[eventName];\n}\nfunction getTargetedStations(stationMeta, target) {\n  if (target === undefined) {\n    return getHeardStations(stationMeta);\n  }\n  if (Array.isArray(target)) {\n    return target;\n  }\n  if (target.stationMeta) {\n    return [target];\n  }\n  throw new Error(`Invalid target`);\n}\nfunction getHeardStations(stationMeta) {\n  const stations = [];\n  const heardStations = stationMeta.heardStations;\n  for (const stationId in heardStations) {\n    stations.push(heardStations[stationId]);\n  }\n  return stations;\n}\nexport {\n  EventStation\n};\n"
  ],
  "mappings": "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",
  "debugId": "C005A59FD0FCDE7964756E2164756E21",
  "names": []
}