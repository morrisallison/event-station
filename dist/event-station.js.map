{"version":3,"file":"event-station.js","sources":["../src/actions/addListener.ts","../src/actions/matchListener.ts","../src/actions/removeListener.ts","../src/actions/removeListenerFromAll.ts","../src/actions/applyListeners.ts","../src/actions/getAllListeners.ts","../src/actions/matchListeners.ts","../src/actions/hasListener.ts","../src/injector.ts","../src/models/Listeners.ts","../src/actions/makeStationId.ts","../src/config.ts","../src/models/EventStation.ts","../src/main.ts"],"sourcesContent":["import {Listener} from '../types/Listener';\nimport {Meta} from '../types/Meta';\n\n/** Adds the given listener to the given station meta */\nexport function addListener(stationMeta: Meta, listener: Listener): void {\n\n    const eventName = listener.eventName;\n    const listenersMap = stationMeta.listenersMap;\n\n    if (!listenersMap[eventName]) {\n        listenersMap[eventName] = [];\n    }\n\n    const stationMetas = listener.stationMetas;\n\n    if (!stationMetas) {\n        listener.stationMetas = [stationMeta];\n    } else {\n        stationMetas.push(stationMeta);\n    }\n\n    listenersMap[eventName].push(listener);\n    stationMeta.listenerCount++;\n\n    const hearer = listener.hearer;\n\n    if (hearer) {\n        hearer.stationMeta.hearingCount++;\n    }\n}\n","import {MatchingListener} from '../types/MatchingListener';\n\n/**\n * Determines whether the given listeners match by performing an approximate match\n * using the `matchCallback`, `matchContext`, `hearer`, and `eventName` properties.\n * @param exactMatch If true, an exact value match will be performed instead of an approximate match.\n */\nexport function matchListener(matchingListener: MatchingListener, attachedListener: MatchingListener, exactMatch?: boolean): boolean {\n\n    if (exactMatch === true) {\n        return matchingListener === attachedListener;\n    }\n\n    const matchCallback = matchingListener.matchCallback;\n\n    if (\n        matchCallback\n        && matchCallback !== attachedListener.matchCallback\n    ) {\n        return false;\n    }\n\n    const matchContext = matchingListener.matchContext;\n\n    if (\n        matchContext !== undefined\n        && matchContext !== attachedListener.matchContext\n    ) {\n        return false;\n    }\n\n    const hearer = matchingListener.hearer;\n\n    if (\n        hearer\n        && hearer !== attachedListener.hearer\n    ) {\n        return false;\n    }\n\n    const eventName = matchingListener.eventName;\n\n    if (\n        eventName !== undefined\n        && eventName !== attachedListener.eventName\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import {Listener} from '../types/Listener';\nimport {matchListener} from './matchListener';\nimport {Meta} from '../types/Meta';\n\n/**\n * Removes all listeners that match the given listener from the given station meta.\n * @param exactMatch If true, an exact value match will be performed instead of an approximate match.\n */\nexport function removeListener(stationMeta: Meta, listener: Listener, exactMatch?: boolean): void {\n\n    if (stationMeta.listenerCount < 1) return;\n\n    const listenersMap = stationMeta.listenersMap;\n    const eventName = listener.eventName;\n    const attachedListeners = listenersMap[eventName];\n\n    if (!attachedListeners) return;\n\n    const attachedListenersCount = attachedListeners.length;\n\n    if (attachedListenersCount === 1) {\n\n        if (!matchListener(listener, attachedListeners[0], exactMatch)) return;\n\n        delete listenersMap[eventName];\n        stationMeta.listenerCount--;\n        reduceHearerHearingCount(listener);\n        removeMetaFromStation(stationMeta, listener);\n\n        return;\n    }\n\n    for (let i = 0, c = attachedListenersCount; i < c; i++) {\n\n        const attachedListener = attachedListeners[i];\n\n        if (!matchListener(listener, attachedListener, exactMatch)) continue;\n\n        /* Remove the listener from the given Meta */\n        attachedListeners.splice(i, 1);\n        stationMeta.listenerCount--;\n        i--;\n        c--;\n\n        reduceHearerHearingCount(listener);\n        removeMetaFromStation(stationMeta, listener);\n    }\n\n    if (attachedListeners.length < 1) {\n        delete listenersMap[eventName];\n    }\n}\n\nfunction removeMetaFromStation(targetMeta: Meta, listener: Listener) {\n\n    const stationMetas = listener.stationMetas;\n\n    if (!stationMetas) return;\n\n    if (stationMetas.length === 1) {\n        listener.stationMetas = undefined;\n        return;\n    }\n\n    const newStationMetas: Meta[] = [];\n\n    for (const stationMeta of stationMetas) {\n        if (stationMeta !== targetMeta) {\n            newStationMetas.push(stationMeta);\n        }\n    }\n\n    if (newStationMetas.length < 1) {\n        /*\n         * This line is necessary in the rare case that\n         * the exact same listener object has been added to\n         * a station multiple times, and is then removed from\n         * said station.\n         */\n        listener.stationMetas = undefined;\n    } else {\n        listener.stationMetas = newStationMetas;\n    }\n}\n\nfunction reduceHearerHearingCount(listener: Listener): void {\n\n    /*\n     * Update the hearingCount of given listener's hearer\n     */\n    const hearer = listener.hearer;\n\n    if (hearer) {\n        hearer.stationMeta.hearingCount--;\n    }\n}\n","import {Listener} from '../types/Listener';\nimport {removeListener} from './removeListener';\n\n/** Removes the given listener from all of the station meta it's attached to */\nexport function removeListenerFromAll(listener: Listener): void {\n\n    const stationMetas = listener.stationMetas;\n\n    if (!stationMetas) return;\n\n    for (const stationMeta of stationMetas) {\n        removeListener(stationMeta, listener, true);\n    }\n}\n","import {Emitter} from '../types/Emitter';\nimport {Listener} from '../types/Listener';\nimport {removeListenerFromAll} from './removeListenerFromAll';\n\n/** Applies the given listeners with the given arguments */\nexport function applyListeners<P extends Promise<any>>(\n    listeners: Listener[],\n    originStation: Emitter,\n    enableAsync: boolean,\n    args: ListenerArguments\n): P[] | void {\n\n    const argsLength = args.length;\n    const stationMeta = originStation.stationMeta;\n\n    stationMeta.isPropagationStopped = false;\n\n    const promises: P[] = [];\n    let result: P | void;\n\n    /* Clone array to prevent mutation */\n    listeners = listeners.slice();\n\n    for (const listener of listeners) {\n\n        if (stationMeta.isPropagationStopped) {\n            stationMeta.isPropagationStopped = false;\n            return;\n        }\n\n        if (listener.isPaused) continue;\n\n        const callback = listener.callback;\n        const context = listener.context;\n\n        if (callback) {\n            switch (argsLength) {\n                case 0:\n                    result = callback.call(context);\n                    break;\n                case 1:\n                    result = callback.call(context, args[0]);\n                    break;\n                case 2:\n                    result = callback.call(context, args[0], args[1]);\n                    break;\n                case 3:\n                    result = callback.call(context, args[0], args[1], args[2]);\n                    break;\n                default:\n                    result = callback.apply(context, args);\n                    break;\n            }\n        }\n\n        /*\n         * Is async enabled, and is the result a Promise-like object\n         */\n        if (\n            enableAsync\n            && result\n            && typeof result.then === 'function'\n            && typeof result.catch === 'function'\n        ) {\n            promises.push(result);\n        }\n\n        const resolves = listener.resolves;\n\n        if (resolves) {\n\n            for (const resolve of resolves) {\n                resolve(listener);\n            }\n\n            listener.resolves = undefined;\n        }\n\n        const maxOccurrences = listener.maxOccurrences;\n        let occurrences = listener.occurrences;\n\n        if (maxOccurrences !== undefined) {\n\n            if (occurrences === undefined) {\n                occurrences = listener.occurrences = 1;\n            } else {\n                occurrences = ++listener.occurrences;\n            }\n\n            if (occurrences === maxOccurrences) {\n                removeListenerFromAll(listener);\n            }\n        }\n    }\n\n    return promises;\n}\n\nexport interface ListenerArguments {\n    [index: number]: any;\n    length: number;\n}\n","import {Listener} from '../types/Listener';\nimport {Meta} from '../types/Meta';\n\n/** Retrieves all listeners attached to the given Meta */\nexport function getAllListeners(stationMeta: Meta): Listener[] {\n\n    if (stationMeta.listenerCount < 1) return [];\n\n    const listenersMap = stationMeta.listenersMap;\n    let listeners: Listener[] = [];\n\n    // `listenersMap` has no prototype\n    // tslint:disable-next-line:no-for-in forin\n    for (const eventName in listenersMap) {\n        listeners = listeners.concat(listenersMap[eventName]);\n    }\n\n    return listeners;\n}\n","import {MatchingListener} from '../types/MatchingListener';\nimport {matchListener} from './matchListener';\n\nexport function matchListeners(matchingListener: MatchingListener, attachedListeners: MatchingListener[], exactMatch?: boolean): boolean {\n\n    const count = attachedListeners.length;\n\n    if (count < 1) return false;\n\n    for (const attachedListener of attachedListeners) {\n        if (matchListener(matchingListener, attachedListener, exactMatch)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n","import {getAllListeners} from './getAllListeners';\nimport {Listener} from '../types/Listener';\nimport {MatchingListener} from '../types/MatchingListener';\nimport {matchListeners} from './matchListeners';\nimport {Meta} from '../types/Meta';\n\n/**\n * Determines whether the given listener is attached to the given station meta.\n * @param exactMatch If true, an exact value match will be performed instead of an approximate match.\n */\nexport function hasListener(stationMeta: Meta, listener: MatchingListener, exactMatch?: boolean): boolean {\n\n    const listenersMap = stationMeta.listenersMap;\n    const eventName = listener.eventName;\n    let attachedListeners: Listener[];\n\n    if (eventName === undefined) {\n\n        attachedListeners = getAllListeners(stationMeta);\n\n    } else {\n\n        attachedListeners = listenersMap[eventName];\n\n        if (!attachedListeners) {\n            return false;\n        }\n    }\n\n    return matchListeners(listener, attachedListeners, exactMatch);\n}\n","import {Rx} from './types/Rx';\n\ndeclare const global: any;\ndeclare const window: any;\n\nexport namespace deps {\n    /**\n     * A reference to the injected Rx namespace.\n     * @see inject()\n     */\n    export let $RxObservable: Rx.ObservableStatic | void = undefined;\n\n    /**\n     * A reference to the Promise object, or an injected Promise-like object.\n     * @see inject()\n     */\n    export let $Promise: typeof Promise | void = getGlobalPromise();\n}\n\n/**\n * Injects or overrides an optional dependency.\n *\n * Use this method to provide EventStation with the `rx` namespace.\n * Doing so enables the use of `Listeners.prototype.toObservable()`.\n *\n *     inject('rx', rx)\n *\n * EventStation will use the native Promise object by default.\n * If a Promise object isn't globally available, one can be\n * injected to be used in its place.\n *\n *     inject('Promise', YourPromiseObject)\n *\n * For example, Bluebird can be injected to override the Promise used\n * within EventStation instances.\n */\nexport function inject(name: 'rx', rx: any): void;\nexport function inject(name: 'Promise', promise: any): void;\nexport function inject(name: string, obj: any): void;\nexport function inject(name: string, obj: any): void {\n\n    switch (name) {\n\n        case 'rx':\n            deps.$RxObservable = obj ? obj.Observable : obj;\n            break;\n\n        case 'Promise':\n            deps.$Promise = obj;\n            break;\n\n        default:\n            throw new Error('Invalid name');\n    }\n}\n\n/** Reset injected dependencies */\nexport function reset(): void {\n    deps.$RxObservable = undefined;\n    deps.$Promise = getGlobalPromise();\n}\n\nfunction getGlobalPromise(): typeof Promise {\n    const glob = typeof window === 'object' ? window : global;\n\n    return glob.Promise;\n}\n","import {addListener} from '../actions/addListener';\nimport {deps} from '../injector';\nimport {Emitter} from '../types/Emitter';\nimport {hasListener} from '../actions/hasListener';\nimport {Listener} from '../types/Listener';\nimport {MatchingListener} from '../types/MatchingListener';\nimport {matchListeners} from '../actions/matchListeners';\nimport {Meta} from '../types/Meta';\nimport {removeListener} from '../actions/removeListener';\nimport {removeListenerFromAll} from '../actions/removeListenerFromAll';\n\n/**\n * A class for operations targeting a collection of listeners\n */\nexport class Listeners {\n\n    /** @returns The number of listeners in the collection */\n    public get count(): number {\n        return this.listeners.length;\n    }\n\n    /** The station which the listeners originate from */\n    private originStation: Emitter;\n\n    /** An array of listeners */\n    private listeners: Listener[];\n\n    constructor(originStation: Emitter, listeners: Listener[]) {\n        this.originStation = originStation;\n        this.listeners = listeners;\n    }\n\n    /**\n     * Sets each listener's maximum occurrence\n     */\n    public occur(maxOccurrences: number): Listeners {\n\n        if (maxOccurrences < 1) {\n            throw new Error(`The maximum occurrences must be greater than or equal to one.`);\n        }\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            listener.maxOccurrences = maxOccurrences;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets each listener's callback function\n     */\n    public calling(callback: Function): Listeners {\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            listener.callback = callback;\n            listener.matchCallback = callback;\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets each listener's callback function, and maximum occurrence to one(1)\n     */\n    public once(callback: Function): Listeners {\n\n        return this.calling(callback).occur(1);\n    }\n\n    /**\n     * Removes the listeners from all stations\n     */\n    public off(): Listeners {\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            removeListenerFromAll(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the context of each listener\n     */\n    public using(context: any): Listeners {\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            listener.context = context;\n            listener.matchContext = context;\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds each listener to the given station\n     */\n    public addTo(station: Emitter): Listeners {\n\n        const listeners = this.listeners;\n        const stationMeta = station.stationMeta;\n\n        for (const listener of listeners) {\n\n            const crossOrigin = listener.crossOrigin;\n\n            if (crossOrigin && crossOrigin !== station) {\n                throw new Error(`Cross-emitter listeners can only be attached to their origin station.`);\n            }\n\n            addListener(stationMeta, listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes each listener from the given station\n     */\n    public removeFrom(station: Emitter): Listeners {\n\n        const listeners = this.listeners;\n        const stationMeta = station.stationMeta;\n\n        for (const listener of listeners) {\n            removeListener(stationMeta, listener, true);\n        }\n\n        return this;\n    }\n\n    /**\n     * Moves the listeners to another station.\n     * This method changes the origin station.\n     */\n    public moveTo(station: Emitter): Listeners {\n\n        this.removeFrom(this.originStation);\n        this.originStation = station;\n        this.addTo(station);\n\n        return this;\n    }\n\n    /**\n     * Determines whether any listener in the collection matches the given listener.\n     * @param exactMatch If true, an exact value match will be performed instead of an approximate match.\n     */\n    public has(matchingListener: MatchingListener, exactMatch?: boolean): boolean {\n        return matchListeners(matchingListener, this.listeners, exactMatch);\n    }\n\n    /**\n     * Adds the listeners to the origin station\n     */\n    public attach(): Listeners {\n        return this.addTo(this.originStation);\n    }\n\n    /**\n     * Removes the listeners from the origin station\n     */\n    public detach(): Listeners {\n        return this.removeFrom(this.originStation);\n    }\n\n    /**\n     * Determines whether any of the listeners are attached to the given station.\n     * If no station is given, the method determines whether any of the listeners\n     * are attached to *any* station.\n     */\n    public isAttachedTo(station?: Emitter): boolean {\n\n        if (!station) {\n            return isListenersAttached(this.listeners);\n        }\n\n        return hasListeners(station.stationMeta, this.listeners, true);\n    }\n\n    /**\n     * Determines whether any of the listeners are attached to the origin station\n     */\n    public isAttached(): boolean {\n        return this.isAttachedTo(this.originStation);\n    }\n\n    /**\n     * Pauses each listener\n     */\n    public pause(): Listeners {\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            listener.isPaused = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * Un-pauses each listener\n     */\n    public resume(): Listeners {\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            listener.isPaused = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * Determines whether any of listeners are paused\n     */\n    public isPaused(): boolean {\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            if (listener.isPaused) return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @returns An iterable object (array) containing a promise\n     * for each listener that resolves when said listener is applied.\n     * This method is dependant on `Promise`.\n     * @see inject()\n     */\n    public toPromises(): Array<Promise<Listener>> {\n\n        const promises: Array<Promise<Listener>> = [];\n        const listeners = this.listeners;\n        const count = listeners.length;\n\n        for (let i = 0; i < count; i++) {\n            const listener = listeners[i];\n\n            promises[i] = makePromise(listener);\n        }\n\n        return promises;\n    }\n\n    /**\n     * @returns A promise that resolves when all of the listeners\n     * have been applied at least once.\n     * This method is dependant on `Promise`.\n     * @see inject()\n     */\n    public all(): Promise<Listener[]> {\n\n        return deps.$Promise.all<Listener>(this.toPromises());\n    }\n\n    /**\n     * @returns A promise that resolves when one of the listeners is applied.\n     * This method is dependant on `Promise`.\n     * @see inject()\n     */\n    public race(): Promise<Listener> {\n\n        return deps.$Promise.race<Listener>(this.toPromises());\n    }\n\n    /**\n     * Un-pauses each listener, and resets each listener's occurrence count\n     */\n    public reset(): Listeners {\n\n        const listeners = this.listeners;\n\n        for (const listener of listeners) {\n            listener.occurrences = undefined;\n            listener.isPaused = undefined;\n        }\n\n        return this;\n    }\n\n    /** Similar to Array.prototype.forEach() */\n    public forEach(func: ForEachCallback): Listeners {\n\n        const listeners = this.listeners;\n        const count = listeners.length;\n\n        for (let i = 0; i < count; i++) {\n            const listener = listeners[i];\n\n            func(listener, i, listeners);\n        }\n\n        return this;\n    }\n\n    /** Retrieves a listener located at the given index */\n    // tslint:disable-next-line:no-reserved-keywords\n    public get(index: number): Listener {\n        return this.listeners[index];\n    }\n\n    /** Retrieves the index of the given listener */\n    public index(listener: Listener): number | void {\n\n        const listeners = this.listeners;\n        const count = listeners.length;\n\n        for (let i = 0; i < count; i++) {\n            if (listener === listeners[i]) return i;\n        }\n    }\n\n    /**\n     * @returns A new `Listeners` object containing a clone of each Listener\n     */\n    public clone(): Listeners {\n        const clonedListeners = this.listeners.map(cloneListener);\n\n        return new Listeners(this.originStation, clonedListeners);\n    }\n}\n\n/** Creates a `Promise` and adds its `resolve` function to the listener's `resolves` array */\nfunction makePromise(listener: Listener): Promise<Listener> {\n\n    if (!deps.$Promise) {\n        throw new Error(`No promises implementation available.`);\n    }\n\n    return new deps.$Promise<Listener>((resolve) => {\n        if (!listener.resolves) {\n            listener.resolves = [resolve];\n        } else {\n            listener.resolves.push(resolve);\n        }\n    });\n}\n\n/**\n * Clones the given listener\n * Does not clone the listener's `stationMetas` or `resolves` properties\n * @throws an `Error` if the listener is a cross-emitter listener\n */\nfunction cloneListener(listener: Listener): Listener {\n\n    if (listener.hearer) {\n        throw new Error(`Cross-emitter listeners can't be cloned.`);\n    }\n\n    return {\n        eventName: listener.eventName,\n        callback: listener.callback,\n        context: listener.context,\n        matchCallback: listener.matchCallback,\n        matchContext: listener.matchContext,\n        isPaused: listener.isPaused,\n        occurrences: listener.occurrences,\n        maxOccurrences: listener.maxOccurrences,\n    };\n}\n\n/** Determines whether the given listeners are attached to any stations */\nexport function isListenersAttached(listeners: Listener[]) {\n    for (const listener of listeners) {\n        if (isListenerAttached(listener)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/** Determines whether the given listener is attached to any stations */\nexport function isListenerAttached(listener: Listener): boolean {\n    return listener.stationMetas !== undefined;\n}\n\n/**\n * Determines whether the given station meta has listeners that match the given listeners\n * @param exactMatch If true, an exact value match will be performed instead of an approximate match.\n */\nfunction hasListeners(stationMeta: Meta, listeners: Listener[], exactMatch?: boolean) {\n    for (const listener of listeners) {\n        if (hasListener(stationMeta, listener, exactMatch)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport interface ForEachCallback {\n    (listener: Listener, index: number, listeners: Listener[]): any;\n}\n","/** Iterator for generating unique station IDs */\nlet stationIdIterator: number = 0;\n\n/** Generates a unique ID for EventStation instances */\nexport function makeStationId(): string {\n    return String(++stationIdIterator);\n}\n","import {Options} from './types/Options';\n\nexport const allEvent = 'all';\n\n/** Container for global configuration options */\nexport const defaultOptions = {\n    delimiter: ' ',\n    emitAllEvent: true,\n    enableDelimiter: true,\n    enableRegExp: false,\n    regExpMarker: '%',\n};\n\n/** Container for global configuration options */\nexport const globalOptions = mergeOptions({}, defaultOptions);\n\n/** Resets the global configuration to defaults */\nexport function reset(): void {\n    mergeOptions(globalOptions, defaultOptions);\n}\n\n/** Modifies the default global configuration */\nexport function config(opts: Options): void {\n    const testOptions = mergeOptions({}, globalOptions, opts);\n\n    assertOptions(testOptions);\n    mergeOptions(globalOptions, opts);\n}\n\n/**\n * Validates the given options\n * @throws Error\n */\nexport function assertOptions<T extends typeof defaultOptions>(opts: T) {\n    if (opts.delimiter === '') {\n        throw new Error(`Invalid option: Delimiters can't be empty strings.`);\n    }\n\n    if (opts.regExpMarker === '') {\n        throw new Error(`Invalid option: RegExp markers can't be empty strings.`);\n    }\n\n    if (opts.regExpMarker && opts.delimiter && opts.regExpMarker.indexOf(opts.delimiter) >= 0) {\n        throw new Error(`Invalid option: RegExp markers can't contain the delimiter string.`);\n    }\n}\n\nexport function mergeOptions<T extends typeof defaultOptions>(target: any, ...sources: any[]): T;\nexport function mergeOptions(target: any) {\n\n    for (let i = 1; i < arguments.length; i++) {\n        const source = arguments[i];\n\n        // tslint:disable-next-line:no-for-in forin\n        for (const option in source) {\n            const isValidOption = defaultOptions.hasOwnProperty(option);\n            const value = source[option];\n\n            if (isValidOption && value != null) {\n                target[option] = value;\n            }\n        }\n    }\n\n    return target;\n}\n","import {addListener} from '../actions/addListener';\nimport {applyListeners} from '../actions/applyListeners';\nimport {Emitter} from '../types/Emitter';\nimport {getAllListeners} from '../actions/getAllListeners';\nimport {hasListener} from '../actions/hasListener';\nimport {Listener} from '../types/Listener';\nimport {Listeners} from './Listeners';\nimport {ListenersMap} from '../types/ListenersMap';\nimport {makeStationId} from '../actions/makeStationId';\nimport {matchListener} from '../actions/matchListener';\nimport {Meta} from '../types/Meta';\nimport {Options} from '../types/Options';\nimport {removeListener} from '../actions/removeListener';\nimport {Rx} from '../types/Rx';\nimport {StationMap} from '../types/StationMap';\nimport * as config from '../config';\nimport * as injector from '../injector';\n\n/**\n * Event emitter class and namespace\n */\nexport class EventStation {\n\n    /** Container for the station's context */\n    public stationMeta: Meta;\n\n    constructor(options?: Options) {\n        EventStation.init(this, options);\n    }\n\n    /** An ID unique to all stations */\n    public get stationId(): string {\n        return this.stationMeta.stationId;\n    }\n\n    /** Number of listeners attached to the station */\n    public get listenerCount(): number {\n        return this.stationMeta.listenerCount;\n    }\n\n    /**\n     * Number of listeners attached to other stations by the station.\n     * This value is increased by using `hear()` and `hearOnce()`.\n     */\n    public get hearingCount(): number {\n        return this.stationMeta.hearingCount;\n    }\n\n    /** Array of event names which have listeners on the station */\n    public get listenerEventNames(): string[] {\n        return Object.getOwnPropertyNames(this.stationMeta.listenersMap);\n    }\n\n    /**\n     * Creates and attaches listeners to the station\n     */\n    public on(listenerMap: CallbackMap, context?: any): Listeners;\n    public on(eventNames: string[], callback?: Function, context?: any): Listeners;\n    public on(eventName: string, callback?: Function, context?: any): Listeners;\n    public on(q: any, r?: any, s?: any): Listeners {\n\n        const stationMeta = this.stationMeta;\n        const listeners = makeListeners(this, false, q, r, s);\n\n        for (const listener of listeners) {\n            addListener(stationMeta, listener);\n        }\n\n        return new Listeners(this, listeners);\n    }\n\n    /**\n     * Creates and attaches listeners to the station that are applied once and removed\n     */\n    public once(listenerMap: CallbackMap, context?: any): Listeners;\n    public once(eventNames: string[], callback?: Function, context?: any): Listeners;\n    public once(eventName: string, callback?: Function, context?: any): Listeners;\n    public once(q: any, r?: any, s?: any): Listeners {\n\n        return this.on(q, r, s).occur(1);\n    }\n\n    /**\n     * Removes listeners from the station that match the given arguments.\n     * If no arguments are given, all listeners will be removed;\n     * including listeners that were attached via `hear()` or `hearOnce()`.\n     */\n    public off(): void;\n    public off(listenerMap: CallbackMap, context?: any): void;\n    public off(eventNames: string[], callback?: Function, context?: any): void;\n    public off(eventName: string, callback?: Function, context?: any): void;\n    public off(q?: any, r?: any, s?: any): void {\n\n        const stationMeta = this.stationMeta;\n\n        if (stationMeta.listenerCount < 1) return;\n\n        // If no listener targets were given\n        if (q === undefined) {\n            removeAllListeners(stationMeta);\n            return;\n        }\n\n        if (\n            r === undefined\n            && s === undefined\n            && typeof q === 'string'\n            && (!stationMeta.enableDelimiter || q.indexOf(stationMeta.delimiter) < 0)\n        ) {\n            removeListeners(q, stationMeta);\n            return;\n        }\n\n        const listeners = makeListeners(this, true, q, r, s);\n\n        for (const listener of listeners) {\n            removeListener(stationMeta, listener);\n        }\n    }\n\n    /**\n     * Creates and attaches listeners to another station.\n     * Listeners attached using this method can be removed specifically by using `disregard()`.\n     */\n    public hear(station: Emitter, listenerMap: CallbackMap, context?: any): Listeners;\n    public hear(station: Emitter, eventNames: string[], callback?: Function, context?: any): Listeners;\n    public hear(station: Emitter, eventName: string, callback?: Function, context?: any): Listeners;\n    public hear(station: Emitter, q: any, r?: any, s?: any): Listeners {\n\n        const heardStations = this.stationMeta.heardStations;\n        const listeners = makeListeners(this, false, q, r, s);\n        const targetStationMeta = station.stationMeta;\n\n        for (const listener of listeners) {\n            listener.hearer = this;\n            listener.crossOrigin = station;\n            addListener(targetStationMeta, listener);\n            heardStations[station.stationId] = station;\n        }\n\n        return new Listeners(station, listeners);\n    }\n\n    /**\n     * Attaches listeners to another station that are applied once and removed\n     * Listeners attached using this method can be removed specifically by using `disregard()`.\n     */\n    public hearOnce(station: Emitter, listenerMap: CallbackMap, context?: any): Listeners;\n    public hearOnce(station: Emitter, eventNames: string[], callback?: Function, context?: any): Listeners;\n    public hearOnce(station: Emitter, eventName: string, callback?: Function, context?: any): Listeners;\n    public hearOnce(station: Emitter, q: any, r?: any, s?: any): Listeners {\n\n        return this.hear(station, q, r, s).occur(1);\n    }\n\n    /**\n     * Removes listeners from other stations that were attached by the station\n     * via `hear()` and `hearOnce()`. If no arguments are given, all listeners\n     * that were attached to other stations are removed.\n     */\n    public disregard(): void;\n    public disregard(target: Emitter | Emitter[]): void;\n    public disregard(target: Emitter | Emitter[], listenerMap: CallbackMap, context?: any): void;\n    public disregard(target: Emitter | Emitter[], eventNames: string[], callback?: Function, context?: any): void;\n    public disregard(target: Emitter | Emitter[], eventName: string, callback?: Function, context?: any): void;\n    public disregard(target?: any, q?: any, r?: any, s?: any): void {\n\n        const stationMeta = this.stationMeta;\n\n        if (stationMeta.hearingCount < 1) return;\n\n        let isRemovingAll = false;\n        let listeners: Listener[] = [];\n\n        // If no listener targets were given\n        if (q === undefined) {\n            isRemovingAll = true;\n        } else {\n            listeners = makeListeners(this, true, q, r, s);\n        }\n\n        const stations = getTargetedStations(stationMeta, target);\n        const count = stations.length;\n\n        for (let x = 0; x < count; x++) {\n\n            const station = stations[x];\n            const targetStationMeta = station.stationMeta;\n\n            if (isRemovingAll) {\n                q = station.listenerEventNames;\n                listeners = makeListeners(this, true, q, r, s);\n            }\n\n            for (const listener of listeners) {\n                listener.hearer = this;\n                removeListener(targetStationMeta, listener);\n            }\n        }\n\n        if (isRemovingAll) {\n            stationMeta.heardStations = Object.create(null);\n        } else {\n            cleanHeardStations(this);\n        }\n    }\n\n    /**\n     * Determines whether the station has attached listeners that match the\n     * given arguments. If no arguments are given, the method determines\n     * whether the station has any attached listeners.\n     */\n    public isHeard(): boolean;\n    public isHeard(listenerMap: CallbackMap, context?: any): boolean;\n    public isHeard(eventNames: string[], callback?: Function, context?: any): boolean;\n    public isHeard(eventName: string, callback?: Function, context?: any): boolean;\n    public isHeard(q?: any, r?: any, s?: any): boolean {\n\n        const stationMeta = this.stationMeta;\n        const listenerCount = stationMeta.listenerCount;\n\n        if (listenerCount < 1) return false;\n\n        if (arguments.length < 1) {\n            // Determine if any listeners are attached\n            return listenerCount > 0;\n        }\n\n        const listeners = makeListeners(this, true, q, r, s);\n\n        for (const listener of listeners) {\n            if (hasListener(stationMeta, listener)) return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether other stations have listeners matching the given\n     * arguments that were attached by the station via `hear()` and `hearOnce()`.\n     * If no arguments are given, the method determines whether other stations\n     * have any listeners attached by the station via `hear()` and `hearOnce()`.\n     */\n    public isHearing(): boolean;\n    public isHearing(target: Emitter | Emitter[]): boolean;\n    public isHearing(target: Emitter | Emitter[], listenerMap: CallbackMap): boolean;\n    public isHearing(target: Emitter | Emitter[], eventNames: string[], callback?: Function): boolean;\n    public isHearing(target: Emitter | Emitter[], eventName: string, callback?: Function): boolean;\n    public isHearing(target?: any, q?: any, r?: any, s?: any): boolean {\n\n        const stationMeta = this.stationMeta;\n\n        if (stationMeta.hearingCount < 1) return false;\n\n        const stations = getTargetedStations(stationMeta, target);\n        let matchAllListeners: boolean = false;\n        let listeners: Listener[] = [];\n\n        // If no listener targets were given\n        if (q) {\n            listeners = makeListeners(this, true, q, r, s);\n        } else {\n            matchAllListeners = true;\n        }\n\n        const count = stations.length;\n\n        for (let x = 0; x < count; x++) {\n            const station = stations[x];\n            const targetStationMeta = station.stationMeta;\n\n            if (matchAllListeners) {\n                q = station.listenerEventNames;\n                listeners = makeListeners(this, true, q, r, s);\n            }\n\n            for (const listener of listeners) {\n                listener.hearer = this;\n\n                if (hasListener(targetStationMeta, listener)) return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Emits events on the station.\n     * Parameters after the first are passed to each listener's callback function.\n     */\n    public emit(eventNames: string[], ...args: any[]): void;\n    public emit(eventName: string, ...args: any[]): void;\n    public emit(input: any, ...args: any[]): void {\n\n        const stationMeta = this.stationMeta;\n\n        if (stationMeta.listenerCount < 1) return;\n\n        const eventNames = parseEventNames(input, stationMeta);\n\n        for (const eventName of eventNames) {\n            emitEvent(eventName, this, false, args);\n        }\n    }\n\n    /**\n     * Emits events on the station, and then completes asynchronously.\n     * Parameters after the first are passed to each listener's callback function.\n     * @returns A `Promise` that resolves after all of the return listener promises resolve.\n     */\n    public emitAsync<R extends any>(eventNames: string[], ...args: any[]): Promise<R[]>;\n    public emitAsync<R extends any>(eventName: string, ...args: any[]): Promise<R[]>;\n    public emitAsync<R extends any>(input: any, ...args: any[]): Promise<R[]> {\n\n        if (!injector.deps.$Promise) {\n            throw new Error(`No promises implementation available.`);\n        }\n\n        const stationMeta = this.stationMeta;\n\n        if (stationMeta.listenerCount < 1) {\n            return injector.deps.$Promise.resolve([]);\n        }\n\n        const eventNames = parseEventNames(input, stationMeta);\n\n        let promises: Promise<R>[] = [];\n\n        for (const eventName of eventNames) {\n            promises = promises.concat(\n                emitEvent<Promise<R>>(eventName, this, true, args)\n            );\n        }\n\n        if (promises.length > 0) {\n            return injector.deps.$Promise.all<R>(promises);\n        } else {\n            return injector.deps.$Promise.resolve([]);\n        }\n    }\n\n    /**\n     * Creates listeners without attaching them to the station\n     */\n    public makeListeners(listenerMap: CallbackMap, context?: any): Listeners;\n    public makeListeners(eventNames: string[], callback?: Function, context?: any): Listeners;\n    public makeListeners(eventName: string, callback?: Function, context?: any): Listeners;\n    public makeListeners(q: any, r?: any, s?: any): Listeners {\n\n        const listeners = makeListeners(this, false, q, r, s);\n\n        return new Listeners(this, listeners);\n    }\n\n    /**\n     * @returns Listeners from the station that match the given arguments.\n     * If no arguments are given, all listeners will be returned;\n     * including listeners that were attached via `hear()` or `hearOnce()`.\n     */\n    public getListeners(): Listeners;\n    public getListeners(listenerMap: CallbackMap, context?: any): Listeners;\n    public getListeners(eventNames: string[], callback?: Function, context?: any): Listeners;\n    public getListeners(eventName: string, callback?: Function, context?: any): Listeners;\n    public getListeners(q?: any, r?: any, s?: any): Listeners | void {\n\n        const attachedListeners = getAllListeners(this.stationMeta);\n\n        if (attachedListeners.length < 1) {\n            return undefined;\n        }\n        if (arguments.length < 1) {\n            return new Listeners(this, attachedListeners);\n        }\n\n        const matchingListeners = makeListeners(this, true, q, r, s);\n        const listeners: Listener[] = [];\n\n        for (const attachedListener of attachedListeners) {\n            for (const matchingListener of matchingListeners) {\n                if (matchListener(matchingListener, attachedListener)) {\n                    listeners.push(attachedListener);\n                    break;\n                }\n            }\n        }\n\n        // No matching listeners were found\n        if (listeners.length < 1) return undefined;\n\n        return new Listeners(this, listeners);\n    }\n\n    /**\n     * @returns A new Rx.Observable object from the station\n     * This method is dependant on `rx`.\n     * @see inject()\n     */\n    public toObservable<T>(eventNames: string[], context?: any, selector?: (args: any[]) => T): Rx.Observable;\n    public toObservable<T>(eventName: string, context?: any, selector?: (args: any[]) => T): Rx.Observable;\n    public toObservable<T>(q: any, s?: any, selector?: (args: any[]) => T): Rx.Observable {\n\n        if (!injector.deps.$RxObservable) {\n            throw new Error(`Rx has not been injected. See documentation for details.`);\n        }\n\n        const addHandler = (r: Function) => {\n            this.on(q, r, s);\n        };\n\n        const removeHandler = (r: Function) => {\n            this.off(q, r, s);\n        };\n\n        return injector.deps.$RxObservable.fromEventPattern<T>(addHandler, removeHandler, selector);\n    }\n\n    /**\n     * Stops the propagation of an emitted event. When called, this method effectively does\n     * nothing if an event is not being emitted at the time.\n     */\n    public stopPropagation(): void {\n        this.stationMeta.isPropagationStopped = true;\n    }\n\n    /**\n     * Adds the given listener to the station\n     */\n    public addListener(listener: Listener): void {\n        addListener(this.stationMeta, listener);\n    }\n\n    /**\n     * Removes all listeners that match the given listener from the station\n     * @param exactMatch If true, an exact value match will be performed instead of an approximate match.\n     */\n    public removeListener(listener: Listener, exactMatch?: boolean): void {\n        removeListener(this.stationMeta, listener, exactMatch);\n    }\n\n    /**\n     * Determines whether any listener attached to the station matches the given listener.\n     * @param exactMatch If true, an exact value match will be performed instead of an approximate match.\n     */\n    public hasListener(listener: Listener, exactMatch?: boolean): boolean {\n        return hasListener(this.stationMeta, listener, exactMatch);\n    }\n\n    /** Initializes the given object */\n    public static init(obj: any, options?: Options): typeof EventStation {\n        obj.stationMeta = makeStationMeta(options);\n\n        return EventStation;\n    }\n\n    public static inject(name: string, obj: any): typeof EventStation {\n        injector.inject(name, obj);\n\n        return EventStation;\n    }\n\n    /** Modifies the global configuration */\n    public static config(opts: Options): typeof EventStation {\n        config.config(opts);\n\n        return EventStation;\n    }\n\n    /** Resets the global configuration and injected dependencies */\n    public static reset(): typeof EventStation {\n        config.reset();\n        injector.reset();\n\n        return EventStation;\n    }\n\n    /**\n     * Extends an object with EventStation's public members\n     */\n    public static extend<T extends Emitter>(obj: any): T {\n        const proto = EventStation.prototype;\n        const properties = Object.keys(proto);\n\n        for (const property of properties) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, property);\n            const newDescriptor: PropertyDescriptor = { configurable: true };\n\n            if (descriptor.get !== undefined) {\n                newDescriptor.get = descriptor.get;\n            } else {\n                newDescriptor.value = descriptor.value;\n            }\n\n            Object.defineProperty(obj, property, newDescriptor);\n        }\n\n        return obj;\n    }\n\n    public static make(): Emitter {\n        const station = EventStation.extend({});\n\n        EventStation.init(station);\n\n        return station;\n    }\n}\n\nfunction parseEventNames(eventNames: string[], options: Meta): string[];\nfunction parseEventNames(eventName: string, options: Meta): string[];\nfunction parseEventNames(input: any, options: Meta): string[] {\n    let names: string[];\n\n    if (typeof input === 'string') {\n\n        const delimiter = options.delimiter;\n\n        if (options.enableDelimiter && delimiter) {\n            names = input.split(delimiter);\n        } else {\n            names = [input];\n        }\n\n    } else if (Array.isArray(input)) {\n        names = input;\n    } else {\n        throw new Error(`Invalid first argument`);\n    }\n\n    return names;\n}\n\n/** Creates a new station meta object from the given configuration options */\nfunction makeStationMeta(options: Options = {}): Meta {\n    const state = {\n        heardStations: Object.create(null),\n        hearingCount: 0,\n        isPropagationStopped: false,\n        listenerCount: 0,\n        listenersMap: Object.create(null),\n        stationId: makeStationId(),\n    };\n\n    const meta = config.mergeOptions<Meta>(state, config.globalOptions, options);\n\n    config.assertOptions(meta);\n\n    return meta;\n}\n\n/**\n * Makes an array of listeners from the given parameters\n * This function normalizes the four ways to make listeners.\n */\nfunction makeListeners(origin: Emitter, isMatching: boolean, listenerMap: CallbackMap, context?: Emitter): Listener[];\nfunction makeListeners(origin: Emitter, isMatching: boolean, eventNames: string[], callback?: Function, context?: Emitter): Listener[];\nfunction makeListeners(origin: Emitter, isMatching: boolean, eventName: string, callback?: Function, context?: Emitter): Listener[];\nfunction makeListeners(origin: Emitter, isMatching: boolean, q: any, r?: any, s?: any): Listener[] {\n\n    if (typeof q === 'string') {\n\n        const stationMeta = origin.stationMeta;\n        const enableDelimiter = stationMeta.enableDelimiter;\n        const delimiter = stationMeta.delimiter;\n\n        if (enableDelimiter && q.indexOf(delimiter) >= 0) {\n            q = (<string>q).split(delimiter);\n            return makeListenersFromArray(origin, isMatching, q, r, s);\n        }\n\n        return [{\n            eventName: q,\n            callback: r,\n            context: !isMatching && s === undefined ? origin : s,\n            matchCallback: r,\n            matchContext: s,\n        }];\n    }\n\n    if (Array.isArray(q)) {\n        return makeListenersFromArray(origin, isMatching, q, r, s);\n    }\n\n    if (typeof q === 'object') {\n        return makeListenersFromMap(origin, isMatching, q, r);\n    }\n\n    throw new Error(`Invalid arguments`);\n}\n\n/** Makes an array of listeners from the given listener map */\nfunction makeListenersFromMap(originStation: Emitter, isMatching: boolean, listenerMap: CallbackMap, context: any): Listener[] {\n\n    const listeners: Listener[] = [];\n\n    // `listenersMap` has no prototype\n    // tslint:disable-next-line:no-for-in forin\n    for (const eventName in listenerMap) {\n\n        listeners.push({\n            eventName: eventName,\n            callback: listenerMap[eventName],\n            context: !isMatching && context === undefined ? originStation : context,\n            matchCallback: listenerMap[eventName],\n            matchContext: context,\n        });\n    }\n\n    return listeners;\n}\n\n/** Makes an array of listeners from the given event name array */\nfunction makeListenersFromArray(origin: Emitter, isMatching: boolean, eventNames: string[], callback: Function, context: any): Listener[] {\n\n    const listeners: Listener[] = [];\n    const count = eventNames.length;\n\n    for (let i = 0; i < count; i++) {\n\n        listeners.push({\n            eventName: eventNames[i],\n            callback: callback,\n            context: !isMatching && context === undefined ? origin : context,\n            matchContext: context,\n            matchCallback: callback,\n        });\n    }\n\n    return listeners;\n}\n\nfunction emitEvent<P extends Promise<any>>(eventName: string, originStation: Emitter, enableAsync: boolean, args: any[]): P[] {\n\n    const stationMeta = originStation.stationMeta;\n    const listenersMap = stationMeta.listenersMap;\n\n    let listeners: Listener[] | void;\n\n    if (stationMeta.enableRegExp) {\n        listeners = searchListeners(eventName, listenersMap, stationMeta.regExpMarker);\n    } else {\n        listeners = listenersMap[eventName];\n    }\n\n    let promises: P[] = [];\n\n    if (listeners) {\n\n        const result = applyListeners<P>(listeners, originStation, enableAsync, args);\n\n        if (enableAsync && result) {\n            promises = promises.concat(result);\n        }\n    }\n\n    const listenersMapAll: Listener[] | void = listenersMap[config.allEvent];\n\n    if (stationMeta.emitAllEvent && listenersMapAll) {\n\n        const argsAll = args.slice();\n\n        argsAll.splice(0, 0, eventName);\n\n        const result = applyListeners<P>(listenersMapAll, originStation, enableAsync, argsAll);\n\n        if (enableAsync && result) {\n            promises = promises.concat(result);\n        }\n    }\n\n    return promises;\n}\n\n/**\n * Retrieves listeners from the given listener map\n * that match the given event name. Specifically,\n * this function recognizes regular expression listeners.\n */\nfunction searchListeners(eventName: string, listenersMap: ListenersMap, regExpMarker: string): Listener[] {\n\n    let listeners: Listener[] = [];\n\n    // `listenersMap` has no prototype\n    // tslint:disable-next-line:no-for-in forin\n    for (const expression in listenersMap) {\n\n        if (expression.indexOf(regExpMarker) === 0) {\n\n            if (new RegExp(expression.substr(regExpMarker.length)).test(eventName)) {\n                listeners = listeners.concat(listenersMap[expression]);\n            }\n\n        } else if (expression === eventName) {\n\n            listeners = listeners.concat(listenersMap[eventName]);\n        }\n    }\n\n    return listeners;\n}\n\n/** Clean the `heardStations` property of the meta of the given station */\nfunction cleanHeardStations(station: Emitter): void {\n\n    const stationMap: StationMap = Object.create(null);\n    const heardStations = station.stationMeta.heardStations;\n\n    // `heardStations` has no prototype\n    // tslint:disable-next-line:no-for-in forin\n    for (const stationId in heardStations) {\n\n        const heardStation = heardStations[stationId];\n\n        if (hasListener(heardStation.stationMeta, { hearer: station })) {\n            stationMap[stationId] = heardStation;\n        }\n    }\n\n    station.stationMeta.heardStations = stationMap;\n}\n\n/** Removes all listeners from then given station meta */\nfunction removeAllListeners(stationMeta: Meta): void {\n\n    const listenersMap = stationMeta.listenersMap;\n\n    // `listenersMap` has no prototype\n    // tslint:disable-next-line:no-for-in forin\n    for (const eventName in listenersMap) {\n\n        const listeners = listenersMap[eventName];\n\n        for (const listener of listeners) {\n            const hearer = listener.hearer;\n\n            if (hearer) {\n                hearer.stationMeta.hearingCount--;\n            }\n        }\n    }\n\n    stationMeta.listenerCount = 0;\n    stationMeta.listenersMap = Object.create(null);\n}\n\n/** Removes all listeners for a particular event from the given station meta */\nfunction removeListeners(eventName: string, stationMeta: Meta): void {\n\n    const listenersMap = stationMeta.listenersMap;\n    const listeners = listenersMap[eventName];\n\n    if (listeners === undefined) return;\n\n    const count = listeners.length;\n\n    for (let i = 0; i < count; i++) {\n\n        const listener = listeners[i];\n        const hearer = listener.hearer;\n\n        if (hearer) {\n            hearer.stationMeta.hearingCount--;\n        }\n    }\n\n    stationMeta.listenerCount = stationMeta.listenerCount - count;\n    delete listenersMap[eventName];\n}\n\n/**\n * Retrieves the targeted stations from the given parameters\n * This function normalizes the the target station for\n * cross-emitter listening methods.\n */\nfunction getTargetedStations(stationMeta: Meta, target?: Emitter | Emitter[]): Emitter[] {\n\n    if (target === undefined) {\n        return getHeardStations(stationMeta);\n    }\n\n    if (Array.isArray(target)) {\n        return target;\n    }\n\n    if (target.stationMeta) {\n        return [target];\n    }\n\n    throw new Error(`Invalid target`);\n}\n\n/**\n * @returns the heard stations of a given station's meta as an array\n */\nfunction getHeardStations(stationMeta: Meta): Emitter[] {\n\n    const stations: Emitter[] = [];\n    const heardStations = stationMeta.heardStations;\n\n    // `heardStations` has no prototype\n    // tslint:disable-next-line:no-for-in forin\n    for (const stationId in heardStations) {\n        stations.push(heardStations[stationId]);\n    }\n\n    return stations;\n}\n\n/**\n * A literal object with non-delimited event names\n * as keys and callback functions as values.\n */\nexport interface CallbackMap {\n    [eventName: string]: Function;\n}\n","import {EventStation} from './models/EventStation';\n\n/* Set properties for module loader compatibility */\n(<any>EventStation).EventStation = EventStation;\n(<any>EventStation).default = EventStation;\n\n// tslint:disable-next-line:no-default-export export-name\nexport default EventStation;\n"],"names":["injector.deps","injector.inject","config.config","config.reset","injector.reset","config.mergeOptions","config.globalOptions","config.assertOptions","config.allEvent","EventStation"],"mappings":"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"}